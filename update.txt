vim.g.mapleader = ' '
vim.g.maplocalleader = ' '
vim.g.have_nerd_font = true

-- [[ Options ]]
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.mouse = 'a'
vim.opt.showmode = false
vim.schedule(function() vim.opt.clipboard = 'unnamedplus' end) -- Sync clipboard with system
vim.opt.breakindent = true
vim.opt.undofile = true
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.signcolumn = 'yes'
vim.opt.updatetime = 250
vim.opt.timeoutlen = 300
vim.opt.splitright = true
vim.opt.splitbelow = true
vim.opt.list = true
vim.opt.listchars = { tab = '» ', trail = '·', nbsp = '␣' }
vim.opt.inccommand = 'split'
vim.opt.cursorline = true
vim.opt.scrolloff = 10

-- [[ Keymaps ]]
vim.keymap.set('n', '<Esc>', '<cmd>nohlsearch<CR>') -- Clear search highlights
vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Diagnostics Quickfix' })
vim.keymap.set('t', '<Esc><Esc>', '<C-\\><C-n>', { desc = 'Exit terminal mode' })

-- Disable arrow keys
vim.keymap.set('n', '<left>', '<cmd>echo "Use h!"<CR>')
vim.keymap.set('n', '<right>', '<cmd>echo "Use l!"<CR>')
vim.keymap.set('n', '<up>', '<cmd>echo "Use k!"<CR>')
vim.keymap.set('n', '<down>', '<cmd>echo "Use j!"<CR>')

-- Window navigation
vim.keymap.set('n', '<C-h>', '<C-w><C-h>', { desc = 'Left window' })
vim.keymap.set('n', '<C-l>', '<C-w><C-l>', { desc = 'Right window' })
vim.keymap.set('n', '<C-j>', '<C-w><C-j>', { desc = 'Down window' })
vim.keymap.set('n', '<C-k>', '<C-w><C-k>', { desc = 'Up window' })

-- [[ Autocommands ]]
vim.api.nvim_create_autocmd('TextYankPost', {
  desc = 'Highlight yanked text',
  group = vim.api.nvim_create_augroup('highlight-yank', { clear = true }),
  callback = function() vim.highlight.on_yank() end,
})

-- [[ Plugin Manager: lazy.nvim ]]
local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  vim.fn.system { 'git', 'clone', '--filter=blob:none', '--branch=stable', 'https://github.com/folke/lazy.nvim.git', lazypath }
  if vim.v.shell_error ~= 0 then error('Error cloning lazy.nvim') end
end
vim.opt.rtp:prepend(lazypath)

-- [[ Plugins ]]
require('lazy').setup({
  opts = { install = { colorscheme = { 'catppuccin' } } },

  -- Auto-detect indentation settings
  'tpope/vim-sleuth',

  -- Git signs in the gutter
  { 'lewis6991/gitsigns.nvim', opts = { signs = { add = { text = '+' }, change = { text = '~' }, delete = { text = '_' } } } },

  -- Keybinding suggestions
  { 'folke/which-key.nvim', event = 'VimEnter', opts = { delay = 10, icons = { mappings = vim.g.have_nerd_font } } },

  -- Fuzzy finder
  { 'nvim-telescope/telescope.nvim',
    event = 'VimEnter',
    branch = '0.1.x',
    dependencies = {
      'nvim-lua/plenary.nvim',
      { 'nvim-telescope/telescope-fzf-native.nvim', build = 'make', cond = function() return vim.fn.executable 'make' == 1 end },
      { 'nvim-tree/nvim-web-devicons', enabled = vim.g.have_nerd_font },
    },
    config = function()
      require('telescope').setup {
        extensions = { ['ui-select'] = { require('telescope.themes').get_dropdown() } },
      }
      pcall(require('telescope').load_extension, 'fzf')
      pcall(require('telescope').load_extension, 'ui-select')
    end,
  },

  -- LSP configuration
  { 'neovim/nvim-lspconfig',
    dependencies = {
      { 'williamboman/mason.nvim', opts = {} },
      'williamboman/mason-lspconfig.nvim',
      'WhoIsSethDaniel/mason-tool-installer.nvim',
      { 'j-hui/fidget.nvim', opts = {} },
      'hrsh7th/cmp-nvim-lsp',
    },
    config = function()
      -- Setup LSP keybindings
      vim.api.nvim_create_autocmd('LspAttach', {
        group = vim.api.nvim_create_augroup('lsp-attach', { clear = true }),
        callback = function(event)
          local map = function(keys, func, desc) vim.keymap.set('n', keys, func, { buffer = event.buf, desc = 'LSP: ' .. desc }) end
          map('gd', require('telescope.builtin').lsp_definitions, 'Go to Definition')
          map('gr', require('telescope.builtin').lsp_references, 'Find References')
          map('gI', require('telescope.builtin').lsp_implementations, 'Go to Implementation')
          map('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type Definition')
          map('<leader>rn', vim.lsp.buf.rename, 'Rename')
          map('<leader>ca', vim.lsp.buf.code_action, 'Code Action')
        end,
      })
      vim.diagnostic.config { severity_sort = true, float = { border = 'rounded' } }
    end,
  },

  -- Autoformatter
  { 'stevearc/conform.nvim',
    event = { 'BufWritePre' },
    cmd = { 'ConformInfo' },
    keys = { { '<leader>f', function() require('conform').format { async = true, lsp_format = 'fallback' } end, mode = '', desc = 'Format' } },
    opts = { notify_on_error = false, formatters_by_ft = { lua = { 'stylua' }, python = { 'isort', 'black' } } },
  },

  -- Autocompletion
  { 'hrsh7th/nvim-cmp',
    event = 'InsertEnter',
    dependencies = {
      { 'L3MON4D3/LuaSnip', build = function() if vim.fn.has 'win32' == 1 or vim.fn.executable 'make' == 0 then return end return 'make install_jsregexp' end },
      'saadparwaiz1/cmp_luasnip',
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-path',
    },
    config = function()
      local cmp = require 'cmp'
      local luasnip = require 'luasnip'
      cmp.setup {
        snippet = { expand = function(args) luasnip.lsp_expand(args.body) end },
        mapping = cmp.mapping.preset.insert { ['<C-n>'] = cmp.mapping.select_next_item(), ['<C-p>'] = cmp.mapping.select_prev_item(), ['<C-y>'] = cmp.mapping.confirm { select = true }, ['<C-Space>'] = cmp.mapping.complete {} },
        sources = { { name = 'nvim_lsp' }, { name = 'luasnip' }, { name = 'path' } },
      }
    end,
  },

  -- Colorscheme
  { 'catppuccin/nvim',
    name = 'catppuccin',
    priority = 1000,
    config = function() require('catppuccin').setup { flavour = 'mocha', transparent_background = true } vim.cmd.colorscheme 'catppuccin' end,
  },

  -- Highlight TODOs
  { 'folke/todo-comments.nvim', event = 'VimEnter', dependencies = { 'nvim-lua/plenary.nvim' }, opts = { signs = false } },

  -- Syntax highlighting with Treesitter
  { 'nvim-treesitter/nvim-treesitter',
    build = ':TSUpdate',
    opts = { ensure_installed = { 'bash', 'lua', 'markdown', 'vim' }, auto_install = true, highlight = { enable = true } },
  },
})